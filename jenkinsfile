pipeline {
    agent any

    environment {
        DOCKER_IMAGE_FE = 'ishop-pipeline2_frontend'
        DOCKER_IMAGE_BE = 'ishop-pipeline2_backend'
    }

    stages {
        stage('checkout github') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'jenkins-pipeline', url: 'https://github.com/manhhung3004/ishop.git']])
            }
        }

        stage('determine changes') {
            steps {
                script {
                    // Get the list of changed files
                    def changedFiles = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split('\n')
                    echo "Changed files: ${changedFiles}"

                    // Determine if changes are in FE or BE
                    def feChanges = changedFiles.any { it.startsWith('FE/') }
                    def beChanges = changedFiles.any { it.startsWith('BE/') }

                    // Set environment variables to indicate which parts need to be built
                    env.BUILD_FE = feChanges ? "true" : "false"
                    env.BUILD_BE = beChanges ? "true" : "false"
                    echo "Build FE: ${env.BUILD_FE}, Build BE: ${env.BUILD_BE}"
                }
            } 
        }

        stage('build docker images') {
            parallel {
                stage('build FE') {
                    when {
                        expression { env.BUILD_FE == "true" }
                    }
                    steps {
                        script {
                            dir('FE') {
                                // Build the FE Docker image
                                echo "Building FE Docker image..."
                                def buildResult = sh(script: 'docker-compose build frontend', returnStatus: true)
                                if(buildResult != 0){
                                    error "Build FE Docker image failed"
                                } else {
                                    sh "docker tag frontend ${DOCKER_IMAGE_FE}:latest"
                                    echo "Tagged FE Docker image as ${DOCKER_IMAGE_FE}:latest"
                                }
                            }
                        }
                    }
                }
                stage('build BE') {
                    when {
                        expression { env.BUILD_BE == "true" }
                    }
                    steps {
                        script {
                            dir('BE') {
                                // Build the BE Docker image
                                echo "Building BE Docker image..."
                                def buildResult = sh(script: 'docker-compose build backend', returnStatus: true)
                                if(buildResult != 0){
                                    error "Build BE Docker image failed"
                                } else {
                                    sh "docker tag backend ${DOCKER_IMAGE_BE}:latest"
                                    echo "Tagged BE Docker image as ${DOCKER_IMAGE_BE}:latest"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('push docker images') {
            parallel {
                stage('push FE') {
                    when {
                        expression { env.BUILD_FE == "true" }
                    }
                    steps {
                        script {
                            withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                                sh 'echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin'
                                // Push the FE image
                                echo "Pushing FE Docker image..."
                                sh "docker push ${DOCKER_IMAGE_FE}:latest"
                            }
                        }
                    }
                }
                stage('push BE') {
                    when {
                        expression { env.BUILD_BE == "true" }
                    }
                    steps {
                        script {
                            withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                                sh 'echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin'
                                // Push the BE image
                                echo "Pushing BE Docker image..."
                                sh "docker push ${DOCKER_IMAGE_BE}:latest"
                            }
                        }
                    }
                }
            }
        }
    }
}
