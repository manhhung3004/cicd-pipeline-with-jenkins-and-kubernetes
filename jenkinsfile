pipeline {
    agent any

    environment {
        DOCKER_IMAGE_FE = 'ishop-pipeline2_frontend'
        DOCKER_IMAGE_BE = 'ishop-pipeline2_backend'
    }

    stages {
        stage('Checkout GitHub') {
            steps {
                checkout scm: git(branch: 'main', credentialsId: 'jenkins-pipeline', url: 'https://github.com/manhhung3004/ishop.git')
            }
        }

        stage('Determine changes') {
            steps {
                script {
                    // Get the list of changed files
                    def changedFiles = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split('\n')
                    echo "Changed files: ${changedFiles}"

                    // Determine if changes are in FE or BE
                    def feChanges = changedFiles.any { it.startsWith('FE/') }
                    def beChanges = changedFiles.any { it.startsWith('BE/') }

                    // Set environment variables to indicate which parts need to be built
                    env.BUILD_FE = feChanges ? "true" : "false"
                    env.BUILD_BE = beChanges ? "true" : "false"
                    echo "Build FE: ${env.BUILD_FE}, Build BE: ${env.BUILD_BE}"
                }
            }
        }

        stage('Build and push Docker images') {
            parallel {
                stage('Build FE') {
                    when {
                        expression { env.BUILD_FE == "true" }
                    }
                    steps {
                        script {
                            dir('FE') {
                                // Build the FE Docker image
                                echo "Building FE Docker image..."
                                sh 'docker-compose build frontend'

                                // Tag and push the FE image
                                sh "docker tag ${DOCKER_IMAGE_FE}:latest mahhhuhh/ishopdockerhub:FE"
                                sh "docker push mahhhuhh/ishopdockerhub:FE"
                                echo "Pushed FE Docker image"
                            }
                        }
                    }
                }

                stage('Build BE') {
                    when {
                        expression { env.BUILD_BE == "true" }
                    }
                    steps {
                        script {
                            dir('BE') {
                                // Build the BE Docker image
                                echo "Building BE Docker image..."
                                sh 'docker-compose build backend'
                                echo "Built BE Docker image"

                                // Tag and push the BE image
                                sh "docker tag ${DOCKER_IMAGE_BE}:latest mahhhuhh/ishopdockerhub:BE"
                                sh "docker push mahhhuhh/ishopdockerhub:BE"
                                echo "Pushed BE Docker image"
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            when {
                branch 'main'
            }
            agent{
                kubernetes
            }
            steps {
                script {
                    // Deploy Frontend
                    if (env.BUILD_FE == "true") {
                        withKubeCredentials(kubectlCredentials: [[
                            caCertificate: '',
                            clusterName: 'kubernetes',
                            contextName: 'kubernetes-admin@kubernetes',
                            credentialsId: 'jenkins-kind',
                            namespace: 'ishop',
                            serverUrl: 'https://192.168.219.148:6443'
                        ]]) {
                            sh "kubectl apply -f deployment-fe.yaml -n ishop"
                            echo "Deployed FE to Kubernetes"
                        }
                    }

                    // Deploy Backend
                    if (env.BUILD_BE == "true") {
                        withKubeCredentials(kubectlCredentials: [[
                            caCertificate: '',
                            clusterName: 'kubernetes',
                            contextName: 'kubernetes-admin@kubernetes',
                            credentialsId: 'jenkins-kind',
                            namespace: 'ishop',
                            serverUrl: 'https://192.168.219.148:6443'
                        ]]) {
                            sh "kubectl apply -f deployment-be.yaml -n ishop"
                            echo "Deployed BE to Kubernetes"
                        }
                    }

                    
                }
            }
        }
    }
}
